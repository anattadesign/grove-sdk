{"ast":null,"code":"import axios from'axios';const cartService={async getCart(){try{const response=await axios.get('/cart.js');return response.data;}catch(error){console.error('Error fetching cart:',error);throw error;}},async addToCart(variantId){let quantity=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;try{const response=await axios.post('/cart/add.js',{id:variantId,quantity});return response.data;}catch(error){console.error('Error adding to cart:',error);throw error;}},async updateCart(line,quantity){try{const response=await axios.post('/cart/change.js',{line,quantity});return response.data;}catch(error){console.error('Error updating cart:',error);throw error;}},async removeItem(line){try{const response=await axios.post('/cart/change.js',{line,quantity:0});return response.data;}catch(error){console.error('Error removing item from cart:',error);throw error;}}};export default cartService;","map":{"version":3,"names":["axios","cartService","getCart","response","get","data","error","console","addToCart","variantId","quantity","arguments","length","undefined","post","id","updateCart","line","removeItem"],"sources":["/Users/unscripter/workspace/projects/grove-co/grove-skd/src/services/cartService.js"],"sourcesContent":["import axios from 'axios';\n\nconst cartService = {\n  async getCart() {\n    try {\n      const response = await axios.get('/cart.js');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching cart:', error);\n      throw error;\n    }\n  },\n  async addToCart(variantId, quantity = 1) {\n    try {\n      const response = await axios.post('/cart/add.js', {\n        id: variantId,\n        quantity\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error adding to cart:', error);\n      throw error;\n    }\n  },\n  async updateCart(line, quantity) {\n    try {\n      const response = await axios.post('/cart/change.js', {\n        line,\n        quantity\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error updating cart:', error);\n      throw error;\n    }\n  },\n  async removeItem(line) {\n    try {\n      const response = await axios.post('/cart/change.js', {\n        line,\n        quantity: 0\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error removing item from cart:', error);\n      throw error;\n    }\n  }\n};\n\nexport default cartService;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB,KAAM,CAAAC,WAAW,CAAG,CAClB,KAAM,CAAAC,OAAOA,CAAA,CAAG,CACd,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAH,KAAK,CAACI,GAAG,CAAC,UAAU,CAAC,CAC5C,MAAO,CAAAD,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC5C,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CACD,KAAM,CAAAE,SAASA,CAACC,SAAS,CAAgB,IAAd,CAAAC,QAAQ,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CACrC,GAAI,CACF,KAAM,CAAAR,QAAQ,CAAG,KAAM,CAAAH,KAAK,CAACc,IAAI,CAAC,cAAc,CAAE,CAChDC,EAAE,CAAEN,SAAS,CACbC,QACF,CAAC,CAAC,CACF,MAAO,CAAAP,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAAC,CAC7C,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CACD,KAAM,CAAAU,UAAUA,CAACC,IAAI,CAAEP,QAAQ,CAAE,CAC/B,GAAI,CACF,KAAM,CAAAP,QAAQ,CAAG,KAAM,CAAAH,KAAK,CAACc,IAAI,CAAC,iBAAiB,CAAE,CACnDG,IAAI,CACJP,QACF,CAAC,CAAC,CACF,MAAO,CAAAP,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC5C,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CACD,KAAM,CAAAY,UAAUA,CAACD,IAAI,CAAE,CACrB,GAAI,CACF,KAAM,CAAAd,QAAQ,CAAG,KAAM,CAAAH,KAAK,CAACc,IAAI,CAAC,iBAAiB,CAAE,CACnDG,IAAI,CACJP,QAAQ,CAAE,CACZ,CAAC,CAAC,CACF,MAAO,CAAAP,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAAC,CACtD,KAAM,CAAAA,KAAK,CACb,CACF,CACF,CAAC,CAED,cAAe,CAAAL,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}